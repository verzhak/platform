
/*!

\file

\brief Интерфейс сторонних модулей - реализаций алгоритмов обработки изображений

Заголовочный файл совместим со стандартом C++11

В пользовательских модулях необходимо реализовать следующие функции:

- process_init();
- process_destroy();
- process_memory();
- process_opencv().

*/

#ifndef INTERFACE_HPP
#define INTERFACE_HPP

#include <cstdint>

extern "C"
{
	/*!
	
	\brief Инициализация модуля

	\param is_opencv_interface - модуль возвращает в данной переменной 0, если им не поддерживается интерфейс к OpenCV (не реализована функция process_opencv()), и <> 0 в противном случае.

	\return 0 - в случае успешного выполнения инициализации;
	\return <> 0 - в случае, если инициализировать модуль не удалось.

	*/
	int process_init(int * is_opencv_interface);

	/*!
	
	\brief Деструктор модуля

	\return 0 - в случае успешного освобождения модулем ресурсов;
	\return <> 0 - в случае, если модулю не удалось выполнить корректное освобождение ресурсов.

	*/
	int process_destroy();

	/*!
	
	\brief Обработка кадра

	\param src - указатель на буфер, содержащий исходное изображение;
	\param dst - указатель на буфер, в котором будет сохранено результирующее изображение;
	\param height - количество строк в обоих изображениях;
	\param width - количество столбцов в обоих изображениях;
	\param channels - количество каналов в src.

	Изображения хранятся в памяти развернутыми построчно. Таким образом, доступ ко k-му каналу пикселя, находящегося в i-ой строке и j-том столбце осуществляется с помощью инструкции: src[(i * width + j) * channels + k].

	Изображение dst интерпретируется далее как бинарное (!). 0 - рассматривается как 0, <> 0 - как 1.

	\return 0 - в случае успешной обработке кадра;
	\return <> 0 - в случае, если обработать кадр не удалось.

	*/
	int process_memory(const std::uint8_t * src, std::uint8_t * dst, const unsigned height, const unsigned width, const unsigned channels);

	/*!
	
	\brief Обработка кадра (OpenCV-интерфейс)

	\param src - указатель на исходное изображение.
	\param dst - указатель на результирующее изображение.

	Указатели src и dst свободно приводятся к указателю на Mat.

	Изображение dst интерпретируется далее как бинарное (!), в котором 0 - рассматривается как 0, <> 0 - как 1.

	\return 0 - в случае успешной обработке кадра;
	\return <> 0 - в случае, если обработать кадр не удалось.

	*/
	int process_opencv(const void * src, void * dst);
};

#endif

